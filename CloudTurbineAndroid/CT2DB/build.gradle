
// Apply the Android plugin for Gradle
apply plugin: 'com.android.application'

android {
	// To locate the SDK version and build tools, define an environment var
	// called ANDROID_HOME and set it to the home directory of the Android SDK
	// installation (for example, for JPW this is C:\Users\johnw\android-sdks).
	// Then add the following directories to the path environment variable:
	//     - %ANDROID_HOME%\platform-tools
	//     - %ANDROID_HOME%\tools
    // Android SDK versions are at %ANDROID_HOME%\platforms
    compileSdkVersion 23
    // Android build tool versions are at %ANDROID_HOME%\build-tools
    buildToolsVersion "23.0.3"
    
    // [OPTIONAL] Specify default settings here; some of the items which can be
    // included in defaultConfig can override attributes in AndroidManifest.xml
    // defaultConfig {
    //     // Defines the minimum API level required to run the app.
    //     minSdkVersion 14
    //     // Specifies the API level used to test the app.
    //     targetSdkVersion 23
    // }
}

dependencies {
	// Include all jar files from this module's "libs" directory
	compile fileTree(dir: 'libs', include: ['*.jar'])
	// Dropbox libraries
	compile files('../Common/dropbox-android-sdk-1.6.3/lib/dropbox-android-sdk-1.6.3.jar')
    compile files('../Common/dropbox-android-sdk-1.6.3/lib/json_simple-1.1.jar')
    // The following libraries are in a "test" folder so I'm not including them
    // in the APK; hopefully this is OK.
    // compile files('../Common/dropbox-android-sdk-1.6.3/lib/test/bcprov-jdk16-146.jar')
    // compile files('../Common/dropbox-android-sdk-1.6.3/lib/test/commons-logging-1.1.1.jar')
    // compile files('../Common/dropbox-android-sdk-1.6.3/lib/test/httpclient-4.0.3.jar')
    // compile files('../Common/dropbox-android-sdk-1.6.3/lib/test/httpcore-4.0.1.jar')
    // compile files('../Common/dropbox-android-sdk-1.6.3/lib/test/httpmime-4.0.3.jar')
}

//
// Automatically execute clean before build
//
// This gets around a problem we had with making our "fat" JAR files; namely,
// if there was a change in a dependency (in a CTlib file, for instance) but no
// change in any source files of the current project, then the JAR file wasn't
// being rebuilt.  To get around this, whenever a user asks to do a "build"
// we force a "clean" to be executed first.
//
// NOTE: Include the line to specify that "clean" is run before "preBuild";
//       otherwise, what was happening is that "clean" was run right before
//       "build" - so the build directory was being deleted!  See Kunal's
//       forum response at:
//       http://stackoverflow.com/questions/17617791/gradle-task-to-call-other-tasks-in-order
//
// Another way to do this is by creating a new task which will call the two
// existing tasks.  Still need to include the "preBuild.mustRunAfter clean"
// line when doing it this way.
// task clean_build {
// 	dependsOn clean, build
// }
//
build.dependsOn clean
preBuild.mustRunAfter clean

