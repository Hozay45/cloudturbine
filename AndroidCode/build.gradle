
// The following buildscript block is for configuring Gradle; don't include
// dependency information in this block for the Android application itself;
// that is in a separate section.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    	// The following specifies the version of the Android Plugin for Gradle
		classpath 'com.android.tools.build:gradle:2.3.0'
    }
}

subprojects {
	
    apply plugin: 'com.android.application'
    
    android {
    	// To locate the SDK version and build tools, define an environment var
    	// called ANDROID_HOME and set it to the home directory of the Android SDK
    	// installation (for example, for JPW this is C:\Users\johnw\android-sdks).
    	// Then add the following directories to the path environment variable:
    	//     - %ANDROID_HOME%\platform-tools
    	//     - %ANDROID_HOME%\tools
    	// Android SDK versions are at %ANDROID_HOME%\platforms
    	compileSdkVersion 23
    	// Android build tool versions are at %ANDROID_HOME%\build-tools
    	buildToolsVersion '25.0.0'
    	
    	// The following suppresses a Lint error which is raised because CTlib.jar
    	// references java.nio.file in cycronix.ctlib.CTreader; this is an error
    	// because java.nio.file is not included in the Android API; however it is
    	// not a problem for us because the Android app doesn't end up using this.
    	lintOptions {
    		disable 'InvalidPackage'
    	}
    	
    	// [OPTIONAL] Specify default settings here; some of the items which can be
    	// included in defaultConfig can override attributes in AndroidManifest.xml
    	defaultConfig {
    	    // Defines the minimum API level required to run the app.
    	    minSdkVersion 14
    	    // Specifies the API level used to test the app.
    		// targetSdkVersion 23
    	}
    	
    }
    
    repositories {
    	flatDir {
    		// Location of CTlib.jar
    		dirs "$rootProject.projectDir/Common"
    	}
        // Fetch open source libraries (eg, Apache Commons) from Maven Central
        mavenCentral()
    }
    
    // The following is based on http://stackoverflow.com/questions/29162899/how-to-use-gradle-to-generate-javadoc-in-android-studio
    // Create "variants" of the Javadoc task specific to debug and release versions of the code
    // This will create new tasks with the following names:
    //     generateDebugJavadoc
    //     generateReleaseJavadoc
    // We don't currently need or use this
    /*
    android.applicationVariants.all { variant ->
    	task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
    		description "Generates Javadoc for $variant.name."
    		failOnError false
    		source = variant.javaCompile.source
    		ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    		classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    		options.links("http://docs.oracle.com/javase/8/docs/api/");
    		options.links("https://developer.android.com/reference/");
    		destinationDir = new File("$rootDir/JavaDoc/" + project.name + "_" + "$variant.name")
    	}
    }
    */
    
    // The following is based on https://medium.com/@hamen/android-library-aar-and-javadoc-6859898cad28#.d3gcepuic
    task javadoc(type: Javadoc) {
    	description "Generates Javadoc."
    	failOnError false
    	source = android.sourceSets.main.java.sourceFiles
    	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    	classpath += configurations.compile
    	options.links("http://docs.oracle.com/javase/8/docs/api/");
    	options.links("https://developer.android.com/reference/");
    	destinationDir = new File("$rootDir/JavaDoc/" + project.name)
    	// To include everything from private level and up in the documentation
    	// options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
    	// Can exclude certain files, for example:
    	// exclude '**/R.java'
    }
    
    // For each subproject clean, remove the Javadoc folder
    clean.doFirst {
        def dirObj = new File("$rootDir/JavaDoc/" + project.name)
        dirObj.deleteDir()
    }
    
    //
    // We put LICENSE and NOTICE files in 2 different places in the APK;
    // this could be refined later as desired.
    //
    
    // LOCATION 1: Put LICENSE and NOTICE files into APK's assets folder
    //    Copy these files into src/main/assets so that they will be
    //    automatically put in the assets folder in the APK
    task copyLicenseFiles(type: Copy) {
    	into "src/main/assets"
    	from "$rootDir/../LICENSE", "$rootDir/../NOTICE"
    }
    // Run copyLicenseFiles before build so the license files are included in the APK
    preBuild.dependsOn copyLicenseFiles
    
    // LOCATION 2: Copy LICENSE and NOTICE files into META-INF folder
    //    This turned out to be a bit of a trick to figure out; the method
    //    here is based on the forum posting at:
    //    https://discuss.gradle.org/t/add-generated-file-to-meta-inf/11831
    task put_files_in_META_INF  {
    	def resDir = new File(buildDir, 'generated/files_for_META_INF/')
    	def destDir = new File(resDir, 'META-INF/')
    	// THIS IS KEY: Add resDir as a resource directory so that it is
    	//              automatically included in the APK
    	android {
    		sourceSets {
    			main.resources {
    				srcDir resDir
    			}
    		}
    	}
    	doLast {
    		destDir.mkdirs()
    		// NOTE: For some reason, if the name of the NOTICE file is just
    		//       "NOTICE" or "NOTICE.txt" then it *doesn't* show up in the
    		//       META-INF; I don't know why!  "LICENSE" *does* go into the
    		//       META-INF directory as-is just fine, but I rename it here
    		//       to have the same "_INFO" extension as NOTICE.
    		// Simple example of creating a new file
    		// def noticefile = new File(destDir, 'NOTICE_INFO')
    		// noticefile.text = "This is yet another test from JPW\n"
    		copy {
    			into destDir
    			from ("$rootDir/../NOTICE") {
    				rename "NOTICE","NOTICE_INFO"
    			}
    			from ("$rootDir/../LICENSE") {
    				rename "LICENSE","LICENSE_INFO"
    			}
    		}
    	}
    }
    // Specify when put_files_in_META_INF should run
    project.afterEvaluate {
    	tasks.findAll { task ->
    		task.name.startsWith('merge') && task.name.endsWith('Resources')
	  }.each { t -> t.dependsOn put_files_in_META_INF }
	}
    
	// Print message when build is complete
    build.doLast {
    	task -> println "Built $task.project.name"
    }
    
    //
    // Automatically execute clean before build
    // Also, have Javadoc built at the same time we run the build task
    //
    // This gets around a problem we had with making our "fat" JAR files;
    // namely, if there was a change in a dependency (in a CTlib file, for
    // instance) but no change in any source files of the current project, then
    // the JAR file wasn't being rebuilt.  To get around this, whenever a user
    // asks to do a "build" we force a "clean" to be executed first.
    //
    // NOTE: Include the line to specify that "clean" is run before "preBuild";
    //       otherwise, what was happening is that "clean" was run right before
    //       "build" - so the build directory was being deleted!  See Kunal's
    //       forum response at:
    //       http://stackoverflow.com/questions/17617791/gradle-task-to-call-other-tasks-in-order
    //
    build.dependsOn clean,javadoc
    preBuild.mustRunAfter clean
}

