defaultTasks 'build'

apply plugin: 'java'

// JAR settings
// Specify ".doFirst" to force this to run in the Execution phase.  Without
// this specification, this would be run during the Configuration phase, which
// would fail if CTlib.jar didn't yet exist; at Execution phase, CTlib.jar
// should have been created already.
jar.doFirst {
    // Create a "fat jar" file which includes all the dependencies; that way,
    // the jar can be run stand-alone with none of the other dependency jars
    // around.  The following was taken from a nice simple example found at:
    // https://newfivefour.com/gradle-hello-world-java-fat-jar.html
    // The "it" variable (kind of like "this" in Java) is a Groovy-ism which
    // represents the implicit variable given to this closure, which I think is
    // the project object.
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    
    // Copy Third_Party/RBNB_EULA.html to the JAR's META-INF directory.
    // An alternate approach would be to simply include RBNB_EULA.html
    // in the src\main\resources\META-INF folder under this project (any file
    // in that folder will be included in the JAR's META-INF folder).
    from ('../Third_Party') {
        include 'RBNB_EULA.html'
        into ("META-INF/RBNB")
    }
    
    // Build up a string containing all the runtime dependencies; this will be
    // used as the 'Class-Path' string in the manifest instead of hard-wiring
    // library names
    StringBuilder sb = new StringBuilder();
    project.configurations.runtime.each {
        sb.append(it.name + ' ')
    }
    String runtimeDependenciesStr = sb.toString().trim()
    
    manifest {
        attributes 'Main-Class': 'ctplugin.CTplugin',
                   'Class-Path': runtimeDependenciesStr
    }
}

repositories {
    flatDir {
    	// Location of CTlib.jar
    	dirs "$rootProject.projectDir/CTlib/build/libs"
    }
}

dependencies {
	// Build CTlib project first, because we use CTlib.jar
	compile project(':CTlib')
	// Specify that we use CTlib.jar
    compile name: 'CTlib'
    // Specify that we use rbnb.jar
    compile name: 'rbnb'
}

//
// Automatically execute clean before build
//
// This gets around a problem we had with making our "fat" JAR files; namely,
// if there was a change in a dependency (in a CTlib file, for instance) but no
// change in any source files of the current project, then the JAR file wasn't
// being rebuilt.  To get around this, whenever a user asks to do a "build"
// we force a "clean" to be executed first.
//
// NOTE: Include the line to specify that "clean" is run before "compileJava";
//       otherwise, what was happening is that the Java files would be compiled
//       and then "clean" was run right before "build" - so the build directory
//       was being deleted!  See Kunal's forum response at:
//       http://stackoverflow.com/questions/17617791/gradle-task-to-call-other-tasks-in-order
//
// Another way to do this is by creating a new task which will call the two
// existing tasks.  Still need to include the "compileJava.mustRunAfter clean"
// line when doing it this way.
// task clean_build {
// 	dependsOn clean, build
// }
//
build.dependsOn clean
compileJava.mustRunAfter clean

// An attemtp to get CTlib to build prior to CT2CSV, but it hasn't worked.
// If this did work, I wouldn't need the "compile project(':CTlib')" line
// in the dependencies section above.
// classes.dependsOn ":CTlib:build"

// Here's how to change the default destination directory for the JAR file;
// we won't do this (ie, we'll keep the default directory structure in place);
// instead, we'll copy the JAR file to a top level "Distribute" folder
// tasks.withType(Jar) {
//     destinationDir = file("$rootDir/Distribute")
// }
// Copy the JAR file to a top level "Distribute" folder; do this last so we
// make sure to get the new JAR file that we just built
build << {
	String fromLoc = "${buildDir}/libs/" + project.name + ".jar"
	String toLoc = "../Distribute"
	copy {
		from fromLoc
        into toLoc
	}
}

