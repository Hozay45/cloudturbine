defaultTasks 'build'

apply plugin: 'java'

// JAR settings
// Specify ".doFirst" to force this to run in the Execution phase.  Without
// this specification, this would be run during the Configuration phase, which
// would fail if CTlib.jar didn't yet exist; at Execution phase, CTlib.jar
// should have been created already.
jar.doFirst {
    // Create a "fat jar" file which includes all the dependencies; that way,
    // the jar can be run stand-alone with none of the other dependency jars
    // around.  The following was taken from a nice simple example found at:
    // https://newfivefour.com/gradle-hello-world-java-fat-jar.html
    // The "it" variable (kind of like "this" in Java) is a Groovy-ism which
    // represents the implicit variable given to this closure, which I think is
    // the project object.
    from {
        (configurations.runtime).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    
    // Build up a string containing all the runtime dependencies; this will be
    // used as the 'Class-Path' string in the manifest instead of hard-wiring
    // library names
    StringBuilder sb = new StringBuilder();
    project.configurations.runtime.each {
        sb.append(it.name + ' ')
    }
    String runtimeDependenciesStr = sb.toString().trim()
    // println "Runtime dependencies 123: <${runtimeDependenciesStr}>"
    
    // 'Class-Path': 'CTlib.jar commons-net-3.5.jar'
    manifest {
        attributes 'Main-Class': 'ctserver.CTserver',
                   'Class-Path': runtimeDependenciesStr
    }
}

repositories {
    flatDir {
    	// Location of CTlib.jar
    	dirs "$rootProject.projectDir/CTlib/build/libs"
    }
}

dependencies {
	// Build CTlib project first, because we use CTlib.jar
	compile project(':CTlib')
	// Specify that we use CTlib.jar
    compile name: 'CTlib'
}

// Not sure it is needed, but we have the copy done last (specified by using
// "<<") to make sure the new jar file gets copied, not the old/original one 
build << {
	String fromLoc = "${buildDir}/libs/CTserver.jar"
	String toLoc = "../../CloudTurbineAndroid/Common"
	println "Copy library from " + fromLoc + " to " + toLoc
	copy {
		from fromLoc
        into toLoc
	}
}

// Here's how to change the default destination directory for the JAR file;
// we won't do this (ie, we'll keep the default directory structure in place);
// instead, we'll copy the JAR file to a top level "Distribute" folder
// tasks.withType(Jar) {
//     destinationDir = file("$rootDir/Distribute")
// }
// Copy the JAR file to a top level "Distribute" folder; do this last so we
// make sure to get the new JAR file that we just built
build << {
	String fromLoc = "${buildDir}/libs/" + project.name + ".jar"
	String toLoc = "../Distribute"
	copy {
		from fromLoc
        into toLoc
	}
}

